<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">


<link rel="stylesheet" href="/styles/admindashboard.css">




<body>
    {{> sidebar }}
    {{> header }}

    <div class="container mt-4">
        <h2>Offer Management</h2>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Sl.No</th>
                    <th>Title</th>
                    <th>Discount (%)</th>
                     <th>Start Date</th>
                    <th>End Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="offer-list">
                {{#each offer}}
                <tr>
                    <td>{{@index}}</td>
                    <td>{{this.title}}</td>
                    <td>{{this.discount}}</td>
                   <td>{{formatDate this.startDate 'YYYY-MM-DD'}}</td>
                    <td>{{formatDate this.endDate 'YYYY-MM-DD'}}</td>
                    <td>
                        <button class="btn btn-warning btn-sm" onclick="editOffer('{{this._id}}')">Edit</button>
                        <button class="btn btn-danger btn-sm" onclick="deleteOffer('{{this._id}}')">Delete</button>
                    </td>
                </tr>
                {{/each}}
            </tbody>
        </table>

        <button class="btn btn-primary" onclick="openOfferModal()">Add Offer</button>
    </div>

    <!-- Offer Modal -->
    <div class="modal fade" id="offerModal" tabindex="-1" aria-labelledby="offerModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="offerModalLabel">Add/Edit Offer</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="offerForm">
                        <div class="mb-3">
                            <label for="title" class="form-label">Offer Title</label>
                            <input type="text" id="title" class="form-control" required>
                        </div>
                        <div class="mb-3">
                            <label for="discount" class="form-label">Discount (%)</label>
                            <input type="number" id="discount" class="form-control" required>
                        </div>
                        <div class="mb-3">
                            <label for="startDate" class="form-label">Start Date</label>
                            <input type="date" id="startDate" class="form-control" required>
                        </div>
                      
                        <div class="mb-3">
                            <label for="endDate" class="form-label">End Date</label>
                            <input type="date" id="endDate" class="form-control" required>
                        </div>
                        <button type="submit" class="btn btn-primary">Save Offer</button>
                    </form>
                </div>
            </div>
        </div>
    </div>





    

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <script>
        function openOfferModal(offer = null) {
            // Reset the form
            document.getElementById('offerForm').reset();

            // Pre-fill form fields if editing an offer
            if (offer) {
                document.getElementById('title').value = offer.title;
                document.getElementById('discount').value = offer.discount;
                document.getElementById('startDate').value = offer.startDate.split('T')[0];
                document.getElementById('endDate').value = offer.endDate.split('T')[0];
            }

            // Update modal title
            document.getElementById('offerModalLabel').textContent = offer ? 'Edit Offer' : 'Add Offer';

            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('offerModal'));
            modal.show();
        }

        document.getElementById('offerForm').addEventListener('submit', async (event) => {
            event.preventDefault();

            const offerData = {
                title: document.getElementById('title').value.trim(),
                discount: document.getElementById('discount').value.trim(),
                 startDate: document.getElementById('startDate').value.trim(),
                endDate: document.getElementById('endDate').value.trim(),
            };
            

            try {
                const response = await axios.post('/admin/addOffer', offerData);
                Swal.fire({
                    title: 'Success!',
                    text: response.data.message,
                    icon: 'success',
                    confirmButtonText: 'OK',
                }).then(() => {
                    location.reload();
                });
            } catch (error) {
                Swal.fire({
                    title: 'Error!',
                    text: error.response?.data?.error || 'Failed to save offer',
                    icon: 'error',
                    confirmButtonText: 'Try Again',
                });
            }
        });



    



async function updateOffer(event) {
    event.preventDefault();

    const offerData = {
        _id: document.getElementById('editOfferId').value,
        title: document.getElementById('editOfferTitle').value.trim(),
        discount: document.getElementById('editOfferDiscount').value.trim(),
        startDate: document.getElementById('editOfferStartDate').value.trim(),
        endDate: document.getElementById('editOfferEndDate').value.trim(),
    };

    try {
        const response = await axios.put(`/admin/updateOffer/${offerData._id}`, offerData);
        Swal.fire({
            title: 'Success!',
            text: response.data.message,
            icon: 'success',
            confirmButtonText: 'OK',
        }).then(() => {
            location.reload();
        });
    } catch (error) {
        console.error('Failed to update offer:', error);
        Swal.fire({
            title: 'Error!',
            text: error.response?.data?.error || 'Failed to update offer',
            icon: 'error',
            confirmButtonText: 'Try Again',
        });
    }
}




        async function deleteOffer(offerId) {
            const confirmation = await Swal.fire({
                title: 'Are you sure?',
                text: 'This offer will be permanently deleted.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'Cancel',
            });

            if (confirmation.isConfirmed) {
                try {
                    const response = await axios.delete(`/admin/deleteOffer/${offerId}`);
                    Swal.fire({
                        title: 'Deleted!',
                        text: response.data.message,
                        icon: 'success',
                        confirmButtonText: 'OK',
                    }).then(() => {
                        location.reload();
                    });
                } catch (error) {
                    Swal.fire({
                        title: 'Error!',
                        text: error.response?.data?.error || 'Failed to delete offer',
                        icon: 'error',
                        confirmButtonText: 'OK',
                    });
                }
            }
        }
    </script>
</body>