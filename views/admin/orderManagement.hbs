<link rel="stylesheet" href="/styles/orderManagement.css">
<link rel="stylesheet" href="/styles/admindashboard.css">
<link rel="stylesheet" href="/styles/category.css">
<link rel="stylesheet" href="/styles/usermanagement.css">
<link rel="stylesheet" href="/styles/product.css">

<body>

  {{>sidebar}}
  {{>header}}

  <h2 class="page-title">Order Management</h2>
  <div class="container">


    <div class="order-table-wrapper">
      <table class="order-table">
        <thead>
          <tr>
            <th>Sl No.</th>
            <th>Order ID</th>
            <th>Customer Name</th>
            <th>Total Amount</th>
            <th>Payment Method</th>
            <th>Delivery Status</th>
            <th>Order Date</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {{#each orders}}
          <tr>
            <td>{{@index}}</td>
            <td>{{orderId}}</td>
            <td>{{this.address.firstName}}</td>
            <td>{{totalAmount}}</td>
            <td>{{paymentMethod}}</td>
            <td>
              <select class="status-dropdown" data-order-id="{{this._id}}" data-current-status="{{orderStatus}}">
                <option value="pending" {{#ifCond orderStatus "==" "pending" }}selected{{/ifCond}}>Pending</option>
                <option value="shipped" {{#ifCond orderStatus "==" "shipped" }}selected{{/ifCond}}>Shipped</option>
                <option value="Delivered" {{#ifCond orderStatus "==" "Delivered" }}selected{{/ifCond}}>Delivered
                </option>
                <option value="canceled" {{#ifCond orderStatus "==" "cancelled" }}selected{{/ifCond}}>Canceled</option>
              </select>
            </td>
            <td>{{formatDate this.orderDate 'YYYY-MMM-DD'}}</td>
            <td>
              {{#if this.hasReturnRequest}}
              <button class="btn btn-edit" data-order-id="{{this._id}}">View Message</button>
              {{/if}}
            </td> 
          </tr>
          {{/each}}
        </tbody>
      </table>
    </div>
  </div>



  <div id="returnRequestModal" class="modal">
  <div class="modal-content">
    <h4>Return Request</h4>
    <p><strong>Reason:</strong> <span id="returnReasonText"></span></p>
    <div class="modal-actions">
      <button id="acceptReturnBtn" class="btn btn-success">Accept</button>
      <button id="rejectReturnBtn" class="btn btn-danger">Reject</button>
      <button id="closeReturnModal" class="btn btn-secondary">Close</button>
    </div>
  </div>

</div>

</body>


<script>

  document.querySelectorAll('.status-dropdown').forEach(dropdown => {
    dropdown.addEventListener('change', async (event) => {
      const orderId = event.target.getAttribute('data-order-id'); // Get the order ID
      const newStatus = event.target.value; // Get the selected status
      

      const currentStatus = event.target.getAttribute('data-current-status')

      const result = await Swal.fire({
        title: 'Are you sure?',
        text: `Do you want to update the status to "${newStatus}"?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, update it!',
        cancelButtonText: 'Cancel'
      });

      if (result.isConfirmed) {
        try {
          // Send the update to the backend via PATCH request
          const response = await axios.patch('/admin/changeOrderStatus', {
            orderId: orderId,
            status: newStatus
          });

          // Show success message using SweetAlert
          Swal.fire({
            title: 'Updated!',
            text: 'Order status has been updated successfully.',
            icon: 'success',
            confirmButtonColor: '#3085d6',
            confirmButtonText: 'OK'
          });

          console.log(response.data);
          event.target.setAttribute('data-current-status', newStatus);

        } catch (error) {

          Swal.fire({
            title: 'Error!',
            text: 'There was an issue updating the order status. Please try again later.',
            icon: 'error',
            confirmButtonColor: '#3085d6',
            confirmButtonText: 'OK'
          });


          console.error('Error updating order status:', error);
        }
      } else {

        event.target.value = event.target.getAttribute('data-current-status');
      }
    });
  });



  document.addEventListener('DOMContentLoaded', function () {
  const viewButtons = document.querySelectorAll('.btn.btn-edit');

  viewButtons.forEach(button => {
    button.addEventListener('click', async function () {
      const orderId = this.getAttribute('data-order-id');
      

      // Fetch return reason from the backend
      try {
        const response = await axios.get(`/admin/getReturnRequest/${orderId}`);
        const returnData = response.data;

        // Populate modal with return reason
        document.getElementById('returnReasonText').textContent = returnData.reason;

        // Open modal
        const modal = document.getElementById('returnRequestModal');
        modal.style.display = 'block';

        // Add accept/reject button handlers
        setupModalActions(orderId);

      } catch (error) {
        console.error('Error fetching return request:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Failed to fetch return request details.',
        });
      }
    });
  });

  // Close modal
  document.getElementById('closeReturnModal').addEventListener('click', function () {
    document.getElementById('returnRequestModal').style.display = 'none';
  });
});



function setupModalActions(orderId) {
  document.getElementById('acceptReturnBtn').onclick = () => updateReturnStatus(orderId, 'Accepted');
  document.getElementById('rejectReturnBtn').onclick = () => updateReturnStatus(orderId, 'Rejected');
  
}

async function updateReturnStatus(orderId, status) {
  try {
    const response = await axios.post('/admin/updateReturnRequestStatus', { orderId, status });
    

    Swal.fire({
      icon: 'success',
      title: 'Success',
      text: response.data.message,
    }).then(() => {
      location.reload(); // Reload the page to update the table
    });
  } catch (error) {
    console.error('Error updating return request status:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'Failed to update return request status.',
    });
  }
}




</script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>