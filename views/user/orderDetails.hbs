<link rel="stylesheet" href="/styles/orderDetails.css">
<link rel="stylesheet" href="/styles/userproduct.css">
<link rel="stylesheet" href="/styles/home.css">
<link rel="stylesheet" href="/styles/productDetails.css">
<link rel="stylesheet" href="/styles/userprofile.css">
<link rel="stylesheet" href="/styles/userAddress.css">

<body>
  {{> navbar}}

  <main class="container-fluid">
    <div class="row">
      <!-- Sidebar -->
      <div class="col-md-3">
        {{> userProfileSidebar}}
      </div>

      <!-- Orders Section -->
      <div class="col-md-9">
        <div class="container">
          <h1>Orders</h1>

          <table class="table">
            <thead>
              <tr>
                <th>Order Date</th>
                <th>Products</th>
                <th>Quantity</th>
                <th>Total Amount</th>
                <th>Payment Method</th>
                <th>Status</th>
                <th>Action</th>
              </tr>
            </thead>
            <tbody>
              {{#each orders}}
              <tr>
                <td>{{formatDate this.orderDate 'YYYY-MM-DD'}}</td>
                <td>
                  {{#each this.products}}
                  <div class="product">
                    <img src="{{this.productId.image.[0]}}" alt="{{this.productId.name}}" class="product-image">
                    <span>{{this.productId.name}} x {{this.quantity}}</span>
                  </div>
                </td>
                <td>{{this.quantity}}</td>
                {{/each}}
                </td>
                <td>₹{{this.totalAmount}}</td>
                <td>{{this.paymentMethod}}</td>

                <td>
                  <span class="{{statusClass this.orderStatus}}">{{this.orderStatus}}</span>
                </td>
               <td class="d-flex flex-wrap gap-2">
        <!-- View Button -->
        <button class="btn btn-sm btn-primary view-btn" style="min-width: 90px;" onclick="viewOrder('{{this._id}}')">
          <i class="fas fa-eye"></i> View
        </button>

        <!-- Cancel Button -->
        {{#ifEquals this.orderStatus "Processing"}}
        <button class="btn btn-sm btn-danger cancel-btn" style="min-width: 90px;" onclick="cancelOrder('{{this._id}}', '{{this.products.[0].productId._id}}')">
          <i class="fas fa-times"></i> Cancel
        </button>
        {{/ifEquals}}

        <!-- Retry Payment Button -->
        {{#ifEquals this.orderStatus "Payment Failed"}}
       <button class="btn btn-sm btn-warning retry-payment-btn"  data-order-id="{{this._id}}" style="min-width: 90px;">
    <i class="fas fa-redo"></i> Retry
</button>
        {{/ifEquals}}

        <!-- Return Button -->
        {{#ifEquals this.orderStatus "Delivered"}}
        <button class="btn btn-sm btn-secondary return-btn" style="min-width: 90px;" onclick="returnOrder('{{this._id}}','{{this.products.productId}}')">
          <i class="fas fa-undo"></i> Return
        </button>
        {{/ifEquals}}

        <!-- download invoice -->
        {{#ifEquals this.orderStatus "Delivered"}}
        <button class="btn btn-sm btn-primary return-btn" style="min-width: 120px; font-weight: bold; border-radius: 25px; padding: 10px 20px; background-color: #fa2e2e; color: #fff; box-shadow: 0 4px 6px rgba(0, 123, 255, 0.2);" onclick="downloadInvoice('{{this._id}}')">
    <i class="fas fa-file-pdf" style="margin-right: 8px;"></i> Download PDF
</button>
        {{/ifEquals}}
      </td>
              </tr>
              {{/each}}
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <!-- Order Details Modal -->
    <div id="orderModal" class="modal" tabindex="-1" role="dialog">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Order Details</h5>
            <button type="button" class="close" onclick="closeModal()" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <p><strong>Order Date:</strong> <span id="modalOrderDate"></span></p>
            <p><strong>Total Amount:</strong> ₹<span id="modalTotalAmount"></span></p>
            <p><strong>Status:</strong> <span id="modalOrderStatus"></span></p>
            <h6>Products:</h6>
            <ul id="modalProductList"></ul>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" onclick="closeModal()">Close</button>
          </div>
        </div>
      </div>
    </div>



    <!-- Return Reason Modal -->
    <div id="returnModal" class="modal" tabindex="-1" role="dialog">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Return Product</h5>
            <button type="button" class="close" onclick="closeReturnModal()" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <form id="returnForm">
              <div class="form-group">
                <label for="returnReason">Reason for Return:</label>
                <textarea class="form-control" id="returnReason" name="returnReason" rows="3" required></textarea>
              </div>
              <input type="hidden" id="returnOrderId">
                <input type="hidden" id="returnProductId">
                </form>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closeReturnModal()">Close</button>
                <button type="button" class="btn btn-primary" onclick="submitReturnRequest()">Submit</button>
              </div>
          </div>
        </div>
      </div>
  </main>

  {{> footer}}

  <script>
    function viewOrder(orderId) {
      // Fetch order details using Axios
      axios.get(`/orderDetails/${orderId}`)
        .then(response => {
          const order = response.data;

          const formattedDate = new Date(order.orderDate).toISOString().split('T')[0];

          // Populate modal with order details
          document.getElementById('modalOrderDate').innerText = formattedDate
          document.getElementById('modalTotalAmount').innerText = order.totalAmount;
          document.getElementById('modalOrderStatus').innerText = order.orderStatus;

          // Populate the product list
          const productList = document.getElementById('modalProductList');
          productList.innerHTML = '';
          order.products.forEach(product => {
            const listItem = document.createElement('li');
            listItem.innerHTML = `
              <img src="${product.productId.image[0]}" alt="${product.productId.name}" width="50">
              <span>${product.productId.name} x ${product.quantity}</span>
            `;
            productList.appendChild(listItem);
          });

          // Display the modal
          document.getElementById('orderModal').style.display = 'flex';
        })
        .catch(error => {
          console.error("Error fetching order details:", error);
          alert("Failed to fetch order details.");
        });
    }

    function closeModal() {
      document.getElementById('orderModal').style.display = 'none';
    }

    function cancelOrder(orderId) {
      Swal.fire({
        title: 'Are you sure?',
        text: "Do you really want to cancel this order?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, cancel it!'
      }).then((result) => {
        if (result.isConfirmed) {

          axios.patch(`/cancelOrder/${orderId}`)
            .then((response) => {
              Swal.fire(
                'Canceled!',
                'Your order has been canceled.',
                'success'
              ).then(() => {
                location.reload(); // Reload after SweetAlert confirmation
              });
            })
            .catch((error) => {
              Swal.fire(
                'Error!',
                'An error occurred while canceling the order.',
                'error'
              );
            });
        }
      });
    }



function returnOrder(orderId, productId) {
  // Populate modal hidden fields
  document.getElementById("returnOrderId").value = orderId;
  document.getElementById("returnProductId").value = productId;

  // Display the modal
  document.getElementById("returnModal").style.display = "flex";
}

function closeReturnModal() {
  document.getElementById("returnModal").style.display = "none";
}



function submitReturnRequest() {
  const orderId = document.getElementById("returnOrderId").value;
  const reason = document.getElementById("returnReason").value;

  if (!reason) {
    alert("Please provide a reason for the return.");
    return;
  }

  // Send return request to backend
  axios.post('/returnOrder', { orderId, reason })
        .then(response => {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: response.data.message, // Success message
                confirmButtonText: 'Okay'
            }).then(() => {
                closeReturnModal();
                location.reload(); // Refresh the page to reflect the return status
            });
        })
        .catch(error => {
            console.error("Error submitting return request:", error);
            if (error.response && error.response.status === 400) {
                // Show duplicate request message
                Swal.fire({
                    icon: 'info',
                    title: 'Return Request Already Submitted',
                    text: error.response.data.message, // Message from the backend
                    confirmButtonText: 'Okay'
                }).then(() => {
                closeReturnModal();
           
            });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Failed to submit return request.',
                    confirmButtonText: 'Retry'
                });
            }
        });
}




// search product
document.getElementById('searchForm').addEventListener('submit', function (e) {
    e.preventDefault(); // Prevent the page from reloading

    const query = document.getElementById('searchInput').value.trim();

    if (query) {
        axios.get('/searchProducts', { params: { query } })
            .then(response => {
                const products = response.data.products; // Backend should return matching products
                const productsContainer = document.querySelector('.listing-row');
                productsContainer.innerHTML = ''; // Clear existing products

                // Render the filtered products
                products.forEach(product => {
                    const productCard = `
                        <div class="col-md-4 mb-4">
                            <div class="product-card card">
                                <a href="/productDetails/${product._id}">
                                    <img src="/${product.image[0]}" class="card-img-top" alt="${product.name}">
                                </a>
                                <div class="card-body text-center">
                                    <h5 class="card-title">${product.name}</h5>
                                    <h3 class="card-text">₹${product.salesPrice}</h3>
                                    <button class="btn btn-outline-primary btn-sm add-to-cart" data-id="${product._id}" data-name="${product.name}" data-price="${product.salesPrice}">
                                        <i class="bi bi-cart"></i> Add to Cart
                                    </button>
                                </div>
                            </div>
                        </div>`;
                    productsContainer.innerHTML += productCard;
                });
            })
            .catch(error => {
                console.error('Error fetching search results:', error);
            });
    }
});




// retry payment
document.addEventListener("DOMContentLoaded", () => {
  // Attach event listener to retry payment buttons
  document.querySelectorAll('.retry-payment-btn').forEach(button => {
    button.addEventListener('click', async (event) => {
      const orderId = button.getAttribute('data-order-id');
      console.log("orderId",orderId)

      try {
        // Initiate retry payment request to the server
        const { data } = await axios.post('/retry-payment', { orderId });

        if (data.success) {
          // Open Razorpay checkout
          const options = {
            key: data.keyId,
            amount: data.amount, // Amount in paise
            currency: "INR",
            name: "TrendZap",
            description: "Complete your payment",
            order_id: data.razorpayOrderId,
            handler: async function (response) {
              // Capture payment after success
              const paymentResponse = await axios.post('/capture-payment', {
                orderId: data.orderId,
                paymentId: response.razorpay_payment_id,
                razorpayOrderId: response.razorpay_order_id,
                signature: response.razorpay_signature,
              });

              if (paymentResponse.data.success) {
             Swal.fire({
                  icon: 'success',
                  title: 'Order Placed Successfully',
                  text: 'Your payment was completed.',
                  confirmButtonText: 'OK'
                }).then(() => {
                  location.reload();
                });
              } else {
               alert("Payment capture failed. Please try again.")
              }
            },
            prefill: {
              name: data.user.name,
              email: data.user.email,
              contact: data.user.contact,
            },
            theme: {
              color: "#3399cc",
            },
          };

          const rzp = new Razorpay(options);
          rzp.open();
        } else {
          alert("Failed to initiate payment retry. Please try again.");
        }
      } catch (error) {
        console.error(error);
        alert("An error occurred. Please try again.");
      }
    });
  });
});



// download invoice

function downloadInvoice(orderId) {
    axios.get(`/downloadInvoice/${orderId}`, { responseType: 'blob' })
        .then(response => {
            const blob = response.data;
            const link = document.createElement('a');
            link.href = window.URL.createObjectURL(blob);
            link.download = `invoice_${orderId}.pdf`; // Set download filename
            link.click();  // Trigger download
            window.URL.revokeObjectURL(link.href); // Clean up
        })
        .catch(error => {
            console.error('Error downloading invoice:', error);
        });
}




  </script>

  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
</body>